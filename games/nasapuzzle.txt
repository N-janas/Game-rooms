<!-- Autor Michal Minikowski -->
<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    </head>
	<style>
	/* autor Michal Minikowski */
body {
    font-family: monospace;
    color: #f1f1f1;
    flex-direction:  column;
    height: 97vh;
    font-size: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    background: rgb(41, 41, 41);
  }
  
  a,
  a:link,
  a:visited,
  a:hover,
  a:active {
    text-decoration: none;
    font-size: 0.8em;
    color: #000000;
  }
  
 .puzzleImg {
     width: 100%;
 }

  #puzzle > table {
    table-layout: fixed;
    border-collapse: collapse;
    width: 100%;
    height: 100%;
  }
  
  #puzzle > table td {
    padding: 0;
    margin: 0;
    border: 5px solid #f1f1f1;
    min-width: 2em;
    width: 2em;
    min-height: 2em;
    height: 2em;
  }
  
  @keyframes lights-on {
    from { 
        background-color: #000; 
    }
    to   {
         background-color: rgb(255, 0, 0);
         }
  }
  
  @keyframes lights-off {
    from {
         background-color: rgb(255, 0, 0);
         }
    to   {
         background-color: #000; 
        }
  }

  #puzzle {
    width: 40vh;
    height: 40vh;
  }
  @media all and (orientation: portrait) { 
    #puzzle {
        width: 40vh;
        height: 40vh;
      }
      #puzzle > table td {
        border: 2px solid #f1f1f1;
      }
}

@media all and (orientation: landscape)  {
    #puzzle {
        width: 70vh;
        height: 70vh;
      }

      #puzzle > table td {
        border: 2px solid #f1f1f1;
      }
}
	</style>
    <body>
        <div id="puzzle"></div>
		<script>
		
const Game = function (size, elem) {
    this.size = size;
    this.elem = elem;
    this.board = [];
    let c = 0;
    for (let i = 0; i < this.size; i++) {
        this.board.push([]);

        for (let j = 0; j < this.size; j++) {
            if (i == 0 && j == 0) {
                this.board[0].push([0, 0]);
            }
            else {
                this.board[i].push([c, c]);
            }
            c++;
        }
    }
};

Game.prototype.isComplete = function () {
    for (let i = 0; i < this.board.length; i++) {
        for (let j = 0; j < this.board[i].length; j++) {
            if (this.board[i][j][0] != this.board[i][j][1]) {
                return false;
            }
        }
    }
    alert("Gratulacje!");
    return true;
};

Game.prototype.print = function () {
    let output = "<table>";
    var nn = 0;
    var imgs = [
        'https://i.imgur.com/YxdxGdG.png',
        'https://i.imgur.com/4TuybIS.png',
        'https://i.imgur.com/xz3nVYa.png',
        'https://i.imgur.com/4JM54aK.png',
        'https://i.imgur.com/qrkFr02.png',
        'https://i.imgur.com/NtczFU3.png',
        'https://i.imgur.com/YzMfyVR.png',
        'https://i.imgur.com/Wgtx9uu.png',
        'https://i.imgur.com/ovhu1Kh.png',
        'https://i.imgur.com/BYesQ3g.png',
        'https://i.imgur.com/X4iLJWp.png',
        'https://i.imgur.com/0fu9DKQ.png',
        'https://i.imgur.com/58RzjQw.png',
        'https://i.imgur.com/rsH0MPj.png',
        'https://i.imgur.com/dV6RvvQ.png',
        'https://i.imgur.com/rEGKzyO.png',
    ]
    for (let i = 0; i < this.board.length; i++) {
        output += "<tr>";
        for (let j = 0; j < this.board[i].length; j++) {
            imagesrc = imgs[this.board[i][j][1]];
            output += "<td onclick='moveHandler(this);' id='" + i + "-" + j + "' " +
                "'><img class='puzzleImg' src='" + imagesrc + "'></td>";
            nn += 1;
        }

        output += "</tr>";
    }

    this.elem.innerHTML = output + "</table>";
};

Game.prototype.randomize = function (amount) {
    if (amount == undefined)
        amount = 1337;

    for (let i = 0; i < amount; i++) {
        const row = Math.random() * this.board.length | 0;
        const col = Math.random() * this.board.length | 0;
        this.move(row, col, true);
    }
};

Game.prototype.move = function (moveRowIndex, moveColumnIndex, dontPrint) {
    if (this.board[moveRowIndex][moveColumnIndex] == undefined) {
        alert("Co");
    }
    if (this.board[moveRowIndex][moveColumnIndex][1] == 0) {
        return;//nie wykonuj ruchu
    }
    let skipper = 0;
    [[-1, 0],//lewo
    [0, -1],//dol
    [1, 0],//prawo
   /*gora*/[0, 1]].forEach(moveDiagonal => {
        if (skipper != 1) {
            if (this.board[moveRowIndex + moveDiagonal[0]] !== undefined &&
                this.board[moveRowIndex + moveDiagonal[0]][moveColumnIndex + moveDiagonal[1]] !== undefined) {
                //istnieje pole ze sprawdzanej strony teraz jezeli jest to pole puste to zamieniamy sie z nim kafelkiem
                if (this.board[moveRowIndex + moveDiagonal[0]][moveColumnIndex + moveDiagonal[1]][1] == 0) {
                    this.board[moveRowIndex + moveDiagonal[0]][moveColumnIndex + moveDiagonal[1]][1] = this.board[moveRowIndex][moveColumnIndex][1];
                    this.board[moveRowIndex][moveColumnIndex][1] = 0;
                    skipper = 1;
                }
            }
        }
    });

    if (!dontPrint) {
        this.print();
    }
};

function moveHandler(elem) {
    puzzle.move(...elem.id.split("-").map(Number));

    if (puzzle.isComplete()) {
        setTimeout(() => {
            puzzle.randomize();
            puzzle.print();
        }, 2875);
    }
}

window.onload = load;
var puzzle;

function load() {
    puzzle = new Game(4, document.getElementById("puzzle"));


    puzzle.randomize();
    puzzle.print();
}
		</script>
    </body>
</html>
